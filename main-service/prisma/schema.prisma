// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGE_POSTS
  MANAGE_COMMENTS
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  posts     Post[]
  username  String   @unique
  email     String   @unique
  password  String
  role     Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Comment Comment[]
}

model Post {
  id         Int                 @id @default(autoincrement())
  title      String
  content    String
  author     User                @relation(fields: [authorId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  authorId   Int
  published  Boolean
  cover      String //@default("/images/default-post.png")
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  Comment    Comment[]
  categories CategoriesOnPosts[]
  tags       String              @default("[]")
}

model Category {
  id        Int                 @id @unique @default(autoincrement())
  name      String
  slug      String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  //  Post      Post?    @relation(fields: [postId], references: [id])
  Post      CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())

  @@id([postId, categoryId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  author    User      @relation(fields: [authorId], references: [id],onDelete: Cascade, onUpdate: Cascade )
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id],onDelete: Cascade, onUpdate: Cascade )
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replyId   Int?
  reply     Comment?  @relation("replies", fields: [replyId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  childs    Comment[] @relation("replies") //https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations
}
